Ordenação Merge:


def intercala(x, inicio, fim, meio):
    inicio_vetor1 = inicio
    inicio_vetor2 = meio + 1
    poslivre = inicio
    aux = [0] * len(x)

    while inicio_vetor1 <= meio and inicio_vetor2 <= fim:
        if x[inicio_vetor1] <= x[inicio_vetor2]:
            aux[poslivre] = x[inicio_vetor1]
            inicio_vetor1 += 1
        else:
            aux[poslivre] = x[inicio_vetor2]
            inicio_vetor2 += 1
        poslivre += 1

    for i in range(inicio_vetor1, meio + 1):
        aux[poslivre] = x[i]
        poslivre += 1

    for i in range(inicio_vetor2, fim + 1):
        aux[poslivre] = x[i]
        poslivre += 1

    for i in range(inicio, fim + 1):
        x[i] = aux[i]

def mergeSort(x, inicio, fim):
    if inicio < fim:
        meio = (inicio + fim) // 2
        mergeSort(x, inicio, meio)
        mergeSort(x, meio + 1, fim)
        intercala(x, inicio, fim, meio)

x = [38, 27, 43, 3, 9, 82, 10]
mergeSort(x, 0, len(x) - 1)
print(x)


Ordenação Quick:


def particao(X, inicio, fim):
    posicao_pivo = (inicio + fim) // 2
    pivo = X[posicao_pivo]
    i = inicio
    j = fim

    while i <= j:
        while X[i] < pivo:
            i += 1

        while X[j] > pivo:
            j -= 1

        if i <= j:
            X[i], X[j] = X[j], X[i]
            i += 1
            j -= 1

    return i

def quickSort(X, inicio, fim):
    if inicio < fim:
        indice_pivo = particao(X, inicio, fim)
        quickSort(X, inicio, indice_pivo - 1)
        quickSort(X, indice_pivo, fim)

x = [6, 1, 8, 2, 7]
quickSort(x, 0, len(x) - 1)
print(x)
